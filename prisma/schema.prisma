// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // User profile fields
  bio           String?
  location      String?
  pronouns      String?
  isPrivate     Boolean   @default(false)
  isVerified    Boolean   @default(false)
  
  // Privacy settings
  showEmail     Boolean   @default(false)
  showLocation  Boolean   @default(false)
  allowMessages Boolean   @default(true)
  
  accounts Account[]
  sessions Session[]
  badges   UserBadge[]
  posts    CommunityPost[]
  comments Comment[]
  reports  Report[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Badge {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  rarity      String   // common, uncommon, rare, epic, legendary
  category    String   // progress, achievement, milestone, special
  requirement String?  // Description of how to earn this badge
  createdAt   DateTime @default(now())
  
  userBadges UserBadge[]
}

model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  badgeId   String
  earnedAt  DateTime @default(now())
  progress  Int      @default(100) // Percentage completed
  
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge Badge @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  
  @@unique([userId, badgeId])
}

model CommunityPost {
  id          String   @id @default(cuid())
  title       String
  content     String
  category    String
  tags        String   // JSON array stored as string
  authorId    String
  isFeatured  Boolean  @default(false)
  isPinned    Boolean  @default(false)
  views       Int      @default(0)
  likes       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  authorId  String
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  post   CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  author User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Report {
  id          String   @id @default(cuid())
  type        String   // bug, feedback, feature-request, safety-concern
  title       String
  description String
  category    String?
  priority    String   @default("medium") // low, medium, high, critical
  status      String   @default("open")   // open, investigating, resolved, closed
  userId      String?
  email       String?  // For anonymous reports
  userAgent   String?
  url         String?  // Page where issue occurred
  attachments String?  // File URLs stored as JSON string
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}
